# The good reference to configure turbine server
# https://github.com/Netflix/Turbine/wiki/Configuration-(1.x)

server.port=${PORT:8989}

; Alert! UPPERCASE is required.
; Turbine needs to retrive the instances of the cluster from Eureka, which only provide UPPERCASE.
; The configuration key turbine.appConfig is a list of eureka serviceIds that turbine will use to lookup instances. 
; Values returned from eureka are uppercase, thus we expect this example to work if there is an app 
; registered with Eureka called "customers":
; The turbine stream is then used in the Hystrix dashboard using a url that looks like: 
; http://my.turbine.sever:8080/turbine.stream?cluster=CUSTOMERS; 
turbine.appConfig=TURBINECLIENT-SERVICE,turbineclient-service-2
#turbine.aggregator.clusterConfig=TURBINECLIENT-SERVICE

; turbine.clusterNameExpression with root an instance of InstanceInfo where the turbine fetch instances info
; This configuration is not needed because by default it's "appName" which is the right one from Eureka. 
turbine.clusterNameExpression='default'

#tips: Netflix -> Spring [ ":8080/hystrix.stream" => "/hystrix.stream" ] 
#turbine.instanceInsertPort=false
turbine.instanceUrlSuffix.turbineclient-service=/hystrix.stream

; Netfilx Turbine supports multiple solutions to retrive the instances of clients
; But in Spring Cloud, the typical configuration is via Eureka
#solution 1: config data based
#turbine.ConfigPropertyBasedDiscovery.turbineclient-service.instances=localhost
#InstanceDiscovery.impl=com.netflix.turbine.discovery.ConfigPropertyBasedDiscovery

#solution 2: file based
#turbine.FileBasedInstanceDiscovery.filePath= [your file path]
#InstanceDiscovery.impl=com.netflix.turbine.discovery.FileBasedInstanceDiscovery

#solution 3: Eureka based
#InstanceDiscovery.impl=com.netflix.turbine.discovery.EurekaInstanceDiscovery.class

#solution 4: customized based
#InstanceDiscovery.impl=com.foo.bar.MyInstanceDiscovery.class
